<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GAME STARTUP
create_enums()
create_element_grid()
create_combinations()
create_effect_particles()
//instance_create(0,0,obj_debug)
instance_create(0,0,obj_darkness)
instance_create(0,0,obj_camera)

//PROCEDURAL GENERATION
randomize()
if room=rm_main
{
    proc_gen(2,2) //Find a path through a 2x2 grid and create chunks    
    path_find('create',0,0)
}
else
{
    create_block_tutorial(0,0)
    instance_create(100,100,obj_player)    
    create_tutorial_popups()    
}
s_scale=1
t_scale=1
s0_x=225
s1_x=525

mouse_left=false
mouse_right=false
mouse_item=undefined
mouse_hover=undefined

hp=150
hp_max=150
hp_prev=hp

pp=0
pp_max=20
pp_lvl=1

dmg=16
dmg_true=16
if room=rm_tutorial{dmg=30 dmg_true=30}

b_a=1

combination='Basic'

current_floor=1

blend=0.1
sway=0

time=0

player_prev_room=0
enemy_prev_count=0
prev_crate=instance_number(obj_crate)
current_floor=1

death_sequence=false

audio_stop_all()
play_sound(snd_main_intro,0)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INTRO MUSIC TRANSITION
if  !audio_is_playing(snd_main_intro)
and !audio_is_playing(snd_main_main)
and !death_sequence

{play_sound(snd_main_main,50)}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///COMBINATION WEAPON
combination_weapon()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MOUSE INTERACTION

mouse_left=mouse_check_button(mb_left)
mouse_right=mouse_check_button(mb_right)

with(all){if position_meeting(mouse_x,mouse_y,id){other.mouse_hover=id}}

if mouse_item
{
    if !instance_exists(mouse_item){mouse_item=undefined} 
}


if mouse_right=false{mouse_item=undefined}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SLOT INTERACTION
if !instance_exists(obj_slot)
{
    slot0=instance_create(view_xview+150,view_yview+550,obj_slot)
    slot1=instance_create(view_xview+350,view_yview+550,obj_slot)
}
else
{
    with(slot0){x=other.s0_x+view_xview y=825+view_yview image_xscale=other.s_scale image_yscale=other.s_scale}
    with(slot1){x=other.s1_x+view_xview y=825+view_yview image_xscale=other.s_scale image_yscale=other.s_scale}
}

//Check combination of current elements and if they are none items, destroy
if slot0.slot_item and slot1.slot_item
{
    combination=check_combination(slot0.slot_item.object_index,slot1.slot_item.object_index)
    if combination='none'{slot0.slot_item.dp=0 slot1.slot_item.dp=0}
}
else
{
    combination='Basic'
}
if death_sequence{combination='none'}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HEALTH / POWER

if (time mod 45)=0{hp+=2}
hp=clamp(hp,0,hp_max)

if hp&lt;hp_prev{play_sound(snd_player_hit,0)}
hp_prev=hp

if hp=0{death_sequence=true if !instance_exists(obj_death_sequence){instance_create(x,y,obj_death_sequence)}}

if pp&gt;=pp_max
{
    pp=pp-pp_max
    pp_max+=20
    hp_max+=25
    hp+=25
    dmg_true+=4
    dmg+=4
    sad_draw(obj_player.x,obj_player.y,'LEVEL UP! DMG/HP ++',c_yellow,'')
    play_sound(snd_level_up,0) 
}

if death_sequence and keyboard_check_pressed(vk_space){room_restart()}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GLOBAL TICK TIMER
time+=1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PLAYER ROOM DETECT AND GATE OPEN/CLOSE

if room=rm_main
{
    if player_prev_room!=object_room(obj_player.x,obj_player.y) or enemy_prev_count!=enemy_in_room(object_room(obj_player.x,obj_player.y))
    {
        //RUN THROUGH EACH PATH OBJECT AND CHANGE STATE
        with(obj_path)
        {
            if place_meeting(x,y,obj_host.rooms[| object_room(obj_player.x,obj_player.y)]) and enemy_in_room(object_room(obj_player.x,obj_player.y))
            {state=s.close}
            else
            {state=s.open}
            
            if state=s.close{image_index=1 if !place_meeting(x,y,obj_collision){instance_create(x,y,obj_collision)}}
            if state=s.open{image_index=0 ID=instance_place(x,y,obj_collision) if ID!=noone{with(ID){instance_destroy()}}}
        }    
    
        with(obj_enemy_parent)
        {
            if place_meeting(x,y,obj_host.rooms[| object_room(obj_player.x,obj_player.y)])
            {state=s.pause}
            else
            {state=s.idle}
        }
        
    player_prev_room=object_room(obj_player.x,obj_player.y)
    enemy_prev_count=enemy_in_room(object_room(obj_player.x,obj_player.y))
    show_debug_message('PATH STATES CHANGED - ENEMY STATES UPDATED')
    }
}
if room=rm_tutorial
{
    if obj_player.x&gt;1000{room=rm_start}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PATHFINDING UPDATE

if room=rm_main
{
    if prev_crate!=instance_number(obj_crate)
    {
        prev_crate=instance_number(obj_crate)
        path_find('refresh',0,0)
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RESTART GAME
if keyboard_check_pressed(ord('R')){game_restart()} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MOUSE CURSOR CONTROL
texture_set_interpolation(false)

if !instance_exists(obj_crosshair_parent)   and
   !instance_exists(obj_zap)                and
   !instance_exists(obj_lightning_crosshair)
                
{draw_sprite_ext(spr_default_cursor,0,mouse_x,mouse_y,3,3,0,c_white,1)} 

texture_set_interpolation(true)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GUI DRAWING
draw_set_halign(fa_middle)
draw_set_valign(fa_middle)

if point_in_rectangle(mouse_x,mouse_y,view_xview,view_yview+750,view_xview+750,view_yview+900){active=true}else{active=false}
if active
{
    s_scale+=0.1
    s0_x+=2
    s1_x-=2
    t_scale-=0.05
}
else
{
    s_scale-=0.1
    s0_x-=2
    s1_x+=2
    t_scale+=0.05
}
s_scale=clamp(s_scale,1,2)
t_scale=clamp(t_scale,1.25,1.75)
s0_x=clamp(s0_x,215,235)
s1_x=clamp(s1_x,515,535)

texture_set_interpolation(false)

    //BACKGROUND
    draw_sprite(spr_gui,0,view_xview,view_yview+750)
    
    //BARS
    h_per=hp/hp_max
    p_per=pp/pp_max
    
    //HP
    col(merge_colour(c.dkgray,c.red,h_per))
    if h_per&lt;0.5
    {
        if b_a=0.5{in=true out=false}
        if b_a=1{in=false out=true}
        if in=true{b_a+=0.05}
        if out=true{b_a-=0.05}
        
        draw_set_alpha(b_a)
    }
    draw_rectangle(view_xview+84-80,view_yview+750+4,view_xview+84+80,view_yview+750+74,0)    
    draw_set_alpha(1)
    
    //PP
    col(merge_colour(c.dkgray,c.blue,p_per))
    draw_rectangle(view_xview+84-80,view_yview+750+74,view_xview+84+80,view_yview+750+144,0)    

    //BAR BORDER
    col(c.white)
    draw_rectangle(view_xview+4,view_yview+750+4,view_xview+164,view_yview+750+144,1)
    
    //TEXT
    fnt(fnt_gui)
        
    if blend=0.1{in=true out=false}
    if blend=0.9{in=false out=true}
    if in=true{blend+=0.01}
    if out=true{blend-=0.01}
    
    colours=get_combination_colours(combination)
    get_hsv()
    hue=lerp(hue0,hue1,blend)
    sat=lerp(sat0,sat1,blend)
    val=lerp(val0,val1,blend)
    if val=0{val=20}
    draw_sprite_ext(spr_gui_middle,0,view_xview+165,view_yview+750,1,1,0,make_colour_hsv(hue,sat,val),1)
    c_top=make_colour_hsv(hue,sat,val)
    c_bot=make_colour_hsv(hue+10,sat,val)
    
    sway+=1
    sway_angle = lengthdir_y(2,sway)
    
    draw_text_transformed_colour(view_xview+375,view_yview+825,combination,t_scale-(string_width(string(combination))-120)*0.005,t_scale-(string_width(string(combination))-120)*0.0075,sway_angle,c_top,c_top,c_bot,c_bot,1)        //Combination Text
    
    col(c.white)
    fnt(fnt_bar)
    draw_text(view_xview+84,view_yview+789,string(hp)+' / '+string(hp_max))        //HP Bar Text
    draw_text(view_xview+84,view_yview+859,string(pp)+' / '+string(pp_max))        //PP Bar Text

    col(c.black)
    fnt(fnt_info)
    draw_set_halign(fa_left)
    draw_text(view_xview+750-150,view_yview+750+30,'DMG: '+string(dmg))
    draw_text(view_xview+750-150,view_yview+750+75,'LEVEL: '+string(pp_lvl))
    draw_text(view_xview+750-150,view_yview+750+120,'FPS: '+string(fps))
        

texture_set_interpolation(true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
