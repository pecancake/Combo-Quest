<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///STARTUP VARIABLES
angle=0
state=s.idle

image_xscale=2
image_yscale=2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///STATE MACHINE
switch(state)
{
    case s.idle:
    {
        count=40      
        angle+=2
        x_mov=lengthdir_x(100,angle)+obj_player.x
        y_mov=lengthdir_y(100,angle)+obj_player.y
        
        if mouse_check_button_pressed(mb_left) and point_distance(x,y,x_mov,y_mov)&lt;100{state=s.attack direction=point_direction(x,y,mouse_x,mouse_y) break}
        motion_set(point_direction(x,y,x_mov,y_mov),point_distance(x,y,x_mov,y_mov)/5)
        image_angle=0
    }break
    
    case s.attack:
    {
        image_angle=direction-90
        speed=count/2
        count-=1
        if place_meeting(x,y,obj_collision){count=0 effect_create(x,y,'clash',sprite_width-sprite_xoffset,sprite_height-sprite_yoffset) play_sound(choose(snd_slash_hit0,snd_slash_hit1,snd_slash_hit2,snd_slash_hit3),0)}
        if place_meeting(x,y,obj_crate) or place_meeting(x,y,obj_enemy){count-=1}
        if count&lt;=0{state=s.idle if object_index!=obj_slash_basic{decay()}}        
    }break
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PARTICLES
part_emitter_region(obj_host.effect,obj_host.emit,x-5,x+5,y-10,y+10,ps_shape_rectangle,ps_distr_linear)

if object_index=obj_slash_fire
{    
    part_emitter_burst(obj_host.effect,obj_host.emit,obj_host.fire,1)
}
if object_index=obj_slash_water
{
    part_emitter_burst(obj_host.effect,obj_host.emit,obj_host.water,1)
}
if object_index=obj_slash_ice
{
    part_emitter_burst(obj_host.effect,obj_host.emit,obj_host.ice,1)
}
if object_index=obj_slash_electric
{
    part_emitter_burst(obj_host.effect,obj_host.emit,obj_host.electric,1)
}
if object_index=obj_slash_air
{
    part_emitter_burst(obj_host.effect,obj_host.emit,obj_host.air,1)
}
if object_index=obj_slash_poison
{
    part_emitter_burst(obj_host.effect,obj_host.emit,obj_host.poison,1)
}
if object_index=obj_slash_light
{
    part_emitter_burst(obj_host.effect,obj_host.emit,obj_host.light,1)
}
if object_index=obj_slash_dark
{
    part_emitter_burst(obj_host.effect,obj_host.emit,obj_host.dark,1)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///OBSTACLE INTERACTION

if (obj_host.time mod 3)=0
{
    crate=instance_place(x,y,obj_crate)
    enemy=instance_place(x,y,obj_enemy_parent)
    
    if object_index=obj_slash_water{obj_player.burning=0}
    if crate!=noone
    {
        crate.hp-=obj_host.dmg
        crate.tint=1
        if object_index=obj_slash_fire{crate.burning=10}
        if object_index=obj_slash_water{crate.burning=0}
        with(crate){decay_particles(x,y,sprite_index,1)}
    }
    
    if enemy!=noone
    {        
        if object_index=obj_slash_fire{enemy.burning=10}
        if object_index=obj_slash_water{enemy.burning=0}
        if object_index=obj_slash_poison{enemy.poisoned=10}
        if object_index=obj_slash_ice{enemy.slowed=15}
        if object_index=obj_slash_electric{enemy.stunned=10}
        if object_index=obj_slash_light{if enemy.light_type=false{enemy.hp-=obj_host.dmg sad_draw(enemy.x,enemy.y,obj_host.dmg,c_white,'-')}else{enemy.hp+=obj_host.dmg/2 sad_draw(enemy.x,enemy.y,obj_host.dmg/2,c_lime,'+')}}
        else if object_index=obj_slash_dark{if enemy.light_type=true{enemy.hp-=obj_host.dmg sad_draw(enemy.x,enemy.y,obj_host.dmg,c_white,'-')}else{enemy.hp+=obj_host.dmg/2 sad_draw(enemy.x,enemy.y,obj_host.dmg/2,c_lime,'+')}}
        else{enemy.hp-=obj_host.dmg/2 enemy.tint=1 sad_draw(enemy.x,enemy.y,obj_host.dmg/2,c_white,'-')}
        
        with(enemy){decay_particles(x,y,sprite_index,1)}
        with(enemy){effect_create(x,y,'blood',sprite_width,sprite_height)}
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
