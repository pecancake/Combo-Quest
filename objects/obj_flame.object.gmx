<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>charged=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>angle=point_direction(obj_player.x,obj_player.y,mouse_x,mouse_y)

len=point_distance(obj_player.x,obj_player.y,mouse_x,mouse_y)
len=clamp(len,0,225)

x=obj_player.x+lengthdir_x(len,angle)
y=obj_player.y+lengthdir_y(len,angle)


if mouse_check_button_pressed(mb_left) and !charged{charged=150 play_sound(snd_flame,0)}
if charged
{
    part_emitter_region(obj_host.effect,obj_host.emit,x-30,x+30,y-30,y+30,ps_shape_ellipse,ps_distr_gaussian)
    if object_index=obj_flame_holy{part_emitter_burst(obj_host.effect,obj_host.emit,obj_host.flame_holy,2)}
    if object_index=obj_flame_dark{part_emitter_burst(obj_host.effect,obj_host.emit,obj_host.flame_dark,2)}

    if collision_circle(x,y,25,obj_enemy_parent,0,0) or collision_circle(x,y,25,obj_crate,0,0)
    {
        if (obj_host.time mod 10)=0
        {
            for (i=0;i!=instance_number(obj_enemy_parent);i+=1)
            {
                ID=instance_find(obj_enemy_parent,i)
                if collision_circle(x,y,25,ID,0,0)
                {
                    ID.tint=1
                    if object_index=obj_flame_holy{if ID.light_type=false{ID.hp-=obj_host.dmg sad_draw(ID.x,ID.y,obj_host.dmg,c_white,'-') ID.burning=5}else{ID.hp+=obj_host.dmg/2 sad_draw(ID.x,ID.y,obj_host.dmg/2,c_green,'+')}}
                    if object_index=obj_flame_dark{if ID.light_type=false{ID.hp+=obj_host.dmg/2 sad_draw(ID.x,ID.y,obj_host.dmg/2,c_green,'+')}else{ID.hp-=obj_host.dmg sad_draw(ID.x,ID.y,obj_host.dmg,c_white,'-') ID.burning=5}}                
                    with(ID){decay_particles(x,y,sprite_index,1)}
                    with(ID){effect_create(x,y,'blood',sprite_width,sprite_height)}
                }    
            }
            for (i=0;i!=instance_number(obj_crate);i+=1)
            {
                ID=instance_find(obj_crate,i)
                if collision_circle(x,y,25,ID,0,0)
                {
                    ID=instance_find(obj_crate,i)
                    ID.hp-=obj_host.dmg/2
                    ID.tint=1
                    ID.burning=5
                    with(ID){decay_particles(x,y,sprite_index,1)}
                } 
            }
        }
    }
    charged-=1
    if charged=0{decay()}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
